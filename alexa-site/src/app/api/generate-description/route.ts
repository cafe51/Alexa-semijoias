// app/api/generate-description/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY, // Certifique-se de que a vari√°vel de ambiente esteja definida
});

// Fun√ß√£o auxiliar para baixar a imagem e convert√™-la para Base64
async function fetchImageAsBase64(url: string): Promise<string> {
    try {
        const res = await fetch(url);
        if (!res.ok) {
            console.error(`Erro ao baixar imagem da URL: ${url}`);
            return url; // fallback: retorna a URL se houver erro
        }
        // Obt√©m o conte√∫do da imagem como ArrayBuffer
        const arrayBuffer = await res.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        // Tenta obter o content-type dos headers; se n√£o dispon√≠vel, assume "image/jpeg"
        const contentType = res.headers.get('content-type') || 'image/jpeg';
        return `data:${contentType};base64,${buffer.toString('base64')}`;
    } catch (err) {
        console.error('Erro ao converter imagem para base64:', err);
        return url; // fallback: retorna a URL
    }
}

export async function POST(request: Request) {
    try {
        const { title, images, previousDescriptions } = await request.json();

        // Constr√≥i o conte√∫do da mensagem como um array de partes, conforme exigido pelo modelo com vis√£o.
        const messageContent: any[] = [];

        // Instru√ß√£o inicial: contextualiza√ß√£o e objetivo da copy.
        messageContent.push({
            type: 'text',
            text: 'Voc√™ √© um especialista em marketing digital e redator publicit√°rio para e-commerce. Analise cuidadosamente as imagens fornecidas e o t√≠tulo (quando dispon√≠vel) do produto para criar uma descri√ß√£o √∫nica, persuasiva e detalhada, que destaque os pontos fortes do produto e incentive a compra.',
        });

        // Detalhamento sobre o tipo de produto e atributos a serem ressaltados.
        messageContent.push({
            type: 'text',
            text: 'Considere que os produtos podem ser semijoias banhadas a ouro 18k ou pe√ßas em a√ßo inox, ambas reconhecidas pela beleza, qualidade e durabilidade. Sua copy deve real√ßar os atributos do produto, evidenciando detalhes √∫nicos presentes nas imagens (como design, cores e texturas) e conectando emocionalmente com o p√∫blico.',
        });

        // Instru√ß√£o para uma an√°lise minuciosa e restri√ß√£o quanto ao termo indesejado.
        messageContent.push({
            type: 'text',
            text: 'Evite fazer qualquer refer√™ncia √† supersti√ß√µes ou coisas do tipo.',
        });

        messageContent.push({
            type: 'text',
            text: 'Antes de criar a descri√ß√£o, fa√ßa uma an√°lise minuciosa das imagens e, se houver, do t√≠tulo do produto. Evite repetir descri√ß√µes anteriores e, sempre que poss√≠vel, n√£o utilize a palavra "sofisticado" (substitua-a por termos mais apropriados ou remova-a).',
        });

        // Exemplos de descri√ß√µes para refer√™ncia.
        messageContent.push({
            type: 'text',
            text: `Abaixo seguem alguns exemplos de descri√ß√µes para refer√™ncia (note que, mesmo que alguns exemplos contenham a palavra "sofisticado", evite us√°-la na resposta):

"‚ú® Um toque de modernidade e eleg√¢ncia! ‚ú®
Com um design marcante, esse brinco de argola com tr√™s fios torcidos combina textura e brilho em uma pe√ßa √∫nica e vers√°til. Dispon√≠vel em tons prateado e dourado, ele √© perfeito para quem busca um acess√≥rio refinado para elevar qualquer look. Feito em a√ßo inox, garante durabilidade e conforto para o uso di√°rio.

üêç O poder e a sedu√ß√£o da serpente no seu look! üêç
Esse anel ousado traz o formato de uma serpente envolvendo o dedo em duas voltas, simbolizando transforma√ß√£o, prote√ß√£o e sabedoria. Seu design envolvente se ajusta perfeitamente, criando um efeito impactante e marcante. Produzido em a√ßo inox, ele √© resistente e perfeito para quem ama acess√≥rios com significado! ‚ú®

üïäÔ∏è F√© e prote√ß√£o em uma joia especial! üïäÔ∏è
Esse colar carrega um profundo significado espiritual com seu pingente do Fruto do Esp√≠rito Santo, representando paz, amor e esperan√ßa. Seu design detalhado transmite delicadeza, tornando-se uma pe√ßa perfeita para expressar sua f√© com estilo. Um acess√≥rio elegante e cheio de luz para iluminar seus dias! ‚ú®

üíñ Um acess√≥rio repleto de amor e significado! üíñ
Essa pulseira encantadora combina charme e delicadeza com seus berloques de cora√ß√µes lisos, perfeitos para representar momentos especiais e pessoas queridas. Os separadores em a√ßo inox adicionam um toque √∫nico e garantem um caimento impec√°vel no pulso. Uma pe√ßa cheia de sentimento para quem ama acess√≥rios marcantes! ‚ú®

üíé Brilho e requinte em cada detalhe! üíé
Esse conjunto deslumbrante combina microzirc√¥nias cravejadas e baguetes brilhantes, criando um efeito luxuoso e marcante. O design redondo equilibra modernidade e eleg√¢ncia, sendo perfeito para ocasi√µes especiais ou para quem ama um toque de glamour no dia a dia. Feito com materiais de alta qualidade, esse conjunto √© um verdadeiro destaque! ‚ú®`,
        });

        // Instru√ß√£o final para gerar a descri√ß√£o.
        messageContent.push({
            type: 'text',
            text: 'Gere uma descri√ß√£o √∫nica e detalhada para o produto, integrando todas as informa√ß√µes anteriores de forma criativa e envolvente.',
        });

        // Se houver t√≠tulo, adiciona-o √† mensagem.
        if (title && title.trim().length > 0) {
            messageContent.push({
                type: 'text',
                text: `O solicitante definiu o produto em poucas palavras como: "${title}". Infelizmente o solicitante n√£o √© bom o suficiente pra criar descri√ß√µes. Agora cabe a voc√™ criar a descri√ß√£o, por favor.`,
            });

            messageContent.push({
                type: 'text',
                text: ` "Evite usar o termo ${title} exatamente como informou o solicitante. Afinal esse n√£o √© o nome do produto, √© apenas uma descri√ß√£o limitada feita pelo solicitante. Evite usar esse termo na chamada inicial, procure ser criativo".`,
            });
        }

        // Processa apenas as duas primeiras imagens.
        if (images && images.length > 0) {
            // Seleciona as duas primeiras imagens (√≠ndices 0 e 1)
            const imagesToProcess = images.slice(0, 2);
            // Para cada imagem: se j√° estiver em Base64, usa-a; caso contr√°rio, baixa e converte.
            const processedImages = await Promise.all(
                imagesToProcess.map(async(img: string) => {
                    if (img.startsWith('data:')) {
                        return img;
                    } else {
                        return await fetchImageAsBase64(img);
                    }
                }),
            );
            // Adiciona cada imagem convertida √† mensagem.
            for (const base64Img of processedImages) {
                messageContent.push({
                    type: 'image_url',
                    image_url: {
                        url: base64Img,
                        detail: 'auto',
                    },
                });
            }
        }

        // Se houver descri√ß√µes anteriores, adicione uma instru√ß√£o para evit√°-las.
        if (previousDescriptions && previousDescriptions.length > 0) {
            messageContent.push({
                type: 'text',
                text: `Evite descri√ß√µes iguais √†s seguintes: ${previousDescriptions.join(' | ')}.`,
            });
        }

        // Chama o OpenAI com a mensagem constru√≠da
        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini', // Use o modelo que est√° funcionando para voc√™
            messages: [
                {
                    role: 'user',
                    content: messageContent,
                },
            ],
            temperature: 0.7,
        });

        const description = response.choices[0].message?.content?.trim();

        if (!description) {
            return NextResponse.json({ error: 'Nenhuma descri√ß√£o gerada.' }, { status: 500 });
        }

        return NextResponse.json({ description });
    } catch (error) {
        console.error('Erro na gera√ß√£o de descri√ß√£o:', error);
        return NextResponse.json({ error: 'Erro ao gerar descri√ß√£o.' }, { status: 500 });
    }
}
